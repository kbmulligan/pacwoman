var mapName = "DEFAULT MAP";

const BLANK = 0;
const WALL = 1;
const DOT = 'X';
const PP = '#';
const NOTHING = '3';
const START = 'S';

// 24x24
var map2 = [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1],
[1,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1],
[1,0,1,1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,1],
[1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1],
[1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
[1,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1],
[1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0],
[1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0],
[1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0],
[1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0],
[1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0],
[1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0],
[1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1],
[1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
[1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1],
[1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1],
[1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]
// 23 x 23
var map  = [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,PP,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,PP,1],
[1,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,0,1],
[1,0,1,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1],
[1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1],
[1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,1],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
[1,1,1,1,1,0,1,0,1,1,1,3,1,1,1,0,1,0,1,1,1,1,1],
[3,3,3,3,1,0,1,0,1,3,3,3,3,3,1,0,1,0,1,3,3,3,3],
[3,3,3,3,1,0,0,0,1,3,3,3,3,3,1,0,0,0,1,3,3,3,3],
[3,3,3,3,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,3,3,3,3],
[3,3,3,3,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,3,3,3,3],
[1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
[1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1],
[1,0,0,0,1,0,0,0,0,0,0,START,DOT,0,0,0,0,0,1,0,0,0,1],
[1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1],
[1,PP,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,PP,1],
[1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]
const MAP_H = map.length;
const MAP_W = map[0].length;

const maps = [map, map2, map];


function mapContains(i, j) {
  if (i >= MAP_W) return false;
  if (i < 0) return false;
  if (j >= MAP_H) return false;
  if (j < 0) return false;
  return true;
}

function getColor (n) {
  let color = "white";
  if (n == 0) color = "black";
  if (n == 1) color = "blue";
  if (n == DOT) color = "black";
  if (n == PP) color = "black";
  if (n == NOTHING) color = "black";
  if (n == START) color = "black";
  return color; 
}

function getHeight (i, j) { 
  return map[i][j]; 
}

function makeDots (m) {
    let newMap = [];
    for (let row of m) {
        newMap.push(row.map(x => x ? x : DOT));
    } 
    return newMap;
}

function getDots (m) {
    let total = 0;
    for (let row of m) {
        total += row.filter(x => x == DOT).length; 
    } 
    return total;
}

function above (m, gx, gy) {
    let result = "ABOVE: ERROR";
    let allKeys = [...m.keys()]; 
    if (allKeys.includes(gy - 1)) {
        result = m[gy - 1][gx];
    }
    return result;
}

function below (m, gx, gy) {
    let result = "BELOW: ERROR";
    let allKeys = [...m.keys()]; 
    if (allKeys.includes(gy + 1)) {
        result = m[gy + 1][gx];
    }
    return result;
}

function toLeftOf (m, gx, gy) {
    let result = "TOLEFTOF: ERROR";
    let allKeys = [...m.keys()]; 
    if (allKeys.includes(gx - 1)) {
        result = m[gy][gx - 1];
    }
    return result;
}

function toRightOf (m, gx, gy) {
    let result = "TORIGHTOF: ERROR";
    let allKeys = [...m.keys()]; 
    if (allKeys.includes(gx + 1)) {
        result = m[gy][gx + 1];
    }
    return result;
}
